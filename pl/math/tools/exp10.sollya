// polynomial for approximating 10^x
//
// Copyright (c) 2023, Arm Limited.
// SPDX-License-Identifier: MIT OR Apache-2.0 WITH LLVM-exception

// exp10f parameters
deg = 5; // poly degree
b = log(2)/(2 * log(10)); // interval
a = -b;

// find polynomial with minimal relative error

f = 10^x;

// return p that minimizes |f(x) - poly(x) - x^d*p(x)|/|f(x)|
approx = proc(poly,d) {
  return remez(1 - poly(x)/f(x), deg-d, [a;b], x^d/f(x), 1e-10);
};
// return p that minimizes |f(x) - poly(x) - x^d*p(x)|
approx_abs = proc(poly,d) {
  return remez(f(x) - poly(x), deg-d, [a;b], x^d, 1e-10);
};

// first coeff is fixed, iteratively find optimal double prec coeffs
poly = 1;
for i from 1 to deg do {
  p = roundcoefficients(approx(poly,i), [|single ...|]);
//  p = roundcoefficients(approx_abs(poly,i), [|single ...|]);
  poly = poly + x^i*coeff(p,0);
};

display = hexadecimal;
print("rel error:", accurateinfnorm(1-poly(x)/10^x, [a;b], 30));
print("abs error:", accurateinfnorm(10^x-poly(x), [a;b], 30));
print("in [",a,b,"]");
print("coeffs:");
for i from 0 to deg do coeff(poly,i);
